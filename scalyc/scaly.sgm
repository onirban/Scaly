<!DOCTYPE language SYSTEM "language.dtd">
<language>

    <syntax id = Program                                        program
        <content identifier                                     property = name
        <content identifier                                     property = directory
        <content link = CompilationUnit       multiple          property = compilationUnits

    <syntax id = CompilationUnit                                top
        <content link = Statement             multiple optional property = statements

    <syntax id = Statement                    multiple abstract
        <content link = Declaration
        <content link = Expression

    <syntax id = Declaration                           abstract base = Statement
        <content link = ConstantDeclaration
        <content link = VariableDeclaration
        <content link = MutableDeclaration
        <content link = FunctionDeclaration
        <content link = EnumDeclaration
        <content link = ClassDeclaration
        <content link = ConstructorDeclaration

    <syntax id = Expression                            abstract base = Statement
        <content link = CodeBlock
        <content link = SimpleExpression

    <syntax id = ConstantDeclaration                            base = Declaration
        <content link = let
        <content link = BindingInitializer                      property = initializer

    <syntax id = VariableDeclaration                            base = Declaration
        <content link = var
        <content link = BindingInitializer                      property = initializer

    <syntax id = MutableDeclaration                             base = Declaration
        <content link = mutable
        <content link = BindingInitializer                      property = initializer

    <syntax id = FunctionDeclaration                            base = Declaration
        <content link = Modifier              multiple optional property = modifiers
        <content link = function
        <content link = FunctionName                            property = name
        <content link = FunctionSignature                       property = signature
        <content link = Expression                     optional property = body

    <syntax id = EnumDeclaration                                base = Declaration
        <content link = enum
        <content identifier                                     property = name
        <content link = leftCurly
        <content link = EnumMember            multiple          property = members
        <content link = rightCurly

    <syntax id = ClassDeclaration                               base = Declaration
        <content link = class
        <content identifier                                     property = name
        <content link = GenericArgumentClause          optional property = genericArgumentClause
        <content link = TypeInheritanceClause          optional property = typeInheritanceClause
        <content link = ClassBody                      optional property = body

    <syntax id = ConstructorDeclaration                         base = Declaration
        <content link = Modifier              multiple optional property = modifiers
        <content link = constructor
        <content link = ParameterClause                         property = parameterClause
        <content link = ThrowsClause                   optional property = throwsClause
        <content link = Expression                              property = body

    <syntax id = CodeBlock                                      base = Expression
        <content link = leftCurly
        <content link = Statement   multiple                    property = statements
        <content link = rightCurly

    <syntax id = SimpleExpression                               base = Expression
        <content link = PrefixExpression                        property = prefixExpression
        <content link = BinaryOp              multiple optional property = binaryOps

    <syntax id = Initializer
        <content link = equal
        <content link = Expression                              property = expression

    <syntax id = BindingInitializer
        <content link = PatternInitializer                      property = initializer
        <content link = AdditionalInitializer multiple optional property = additionalInitializers

    <syntax id = PatternInitializer           multiple
        <content link = Pattern                                 property = pattern
        <content link = Initializer                    optional property = initializer

    <syntax id = AdditionalInitializer        multiple
        <content link = comma
        <content link = PatternInitializer                      property = pattern

    <syntax id = Modifier                     multiple abstract
        <content link = OverrideWord
        <content link = StaticWord

    <syntax id = OverrideWord                                   base = Modifier
        <content link = override

    <syntax id = StaticWord                                     base = Modifier
        <content link = static

    <syntax id = FunctionName                          abstract
        <content link = IdentifierFunction

    <syntax id = IdentifierFunction                             base = FunctionName
        <content identifier                                     property = name

    <syntax id = FunctionSignature
        <content link = ParameterClause                         property = parameterClause
        <content link = FunctionResult                 optional property = result
        <content link = ThrowsClause                   optional property = throwsClause

    <syntax id = FunctionResult
        <content link = colon
        <content link = ExistingClause                 optional property = existingObject
        <content link = Type                                    property = resultType

    <syntax id = ExistingClause
        <content link = existing>

    <syntax id = ParameterClause              multiple
        <content link = leftParen
        <content link = Parameter             multiple optional property = parameters
        <content link = rightParen

    <syntax id = Parameter                    multiple abstract
        <content link = ConstParameter
        <content link = VarParameter

    <syntax id = ConstParameter                                 base = Parameter
        <content link = let                            optional
        <content identifier                                     property = name
        <content link = colon
        <content link = Type                                    property = parameterType
        <content link = comma                          optional

    <syntax id = VarParameter                                   base = Parameter
        <content link = mutable
        <content identifier                                     property = name
        <content link = colon
        <content link = Type                                    property = parameterType
        <content link = comma                          optional

    <syntax id = ThrowsClause
        <content link = throws
        <content link = Type                                    property = throwsType

    <syntax id = EnumMember                   multiple
        <content link = case
        <content link = EnumCase                                property = enumCase
        <content link = AdditionalCase        multiple optional property = additionalCases
        <content link = ParameterClause                optional property = parameterClause

    <syntax id = EnumCase
        <content identifier                                     property = name

    <syntax id = AdditionalCase               multiple
        <content link = comma
        <content link = EnumCase                                property = enumCase

    <syntax id = ClassBody
        <content link = leftCurly
        <content link = ClassMember           multiple optional property = members
        <content link = rightCurly

    <syntax id = GenericArgumentClause
        <content link = leftAngular
        <content link = GenericParameter      multiple          property = genericParameters
        <content link = rightAngular

    <syntax id = GenericParameter multiple
        <content identifier                                     property = typeName

    <syntax id = ClassMember                  multiple
        <content link = Declaration                             property = declaration

    <syntax id = PrefixExpression
        <content prefixoperator                        optional property = prefixOperator
        <content link = PostfixExpression                       property = expression

    <syntax id = PostfixExpression
        <content link = PrimaryExpression                       property = primaryExpression
        <content link = Postfix               multiple optional property = postfixes

    <syntax id = BinaryOp                     multiple abstract
        <content link = BinaryOperation
        <content link = Assignment
        <content link = TypeQuery
        <content link = TypeCast

    <syntax id = BinaryOperation                                base = BinaryOp
        <content binaryoperator                                 property = binaryOperator
        <content link = PrefixExpression                        property = expression

    <syntax id = Assignment                                     base = BinaryOp
        <content link = equal
        <content link = Expression                              property = expression

    <syntax id = TypeQuery                                      base = BinaryOp
        <content link = is
        <content link = Type                                    property = objectType

    <syntax id = TypeCast                                       base = BinaryOp
        <content link = as
        <content link = Type                                    property = objectType

    <syntax id = CatchClause                  multiple
        <content link = catch
        <content link = CatchPattern                            property = catchPattern
        <content link = TuplePattern                   optional property = bindingPattern
        <content link = Expression                              property = expression

    <syntax id = CatchPattern                          abstract
        <content link = WildCardCatchPattern
        <content link = IdentifierCatchPattern

    <syntax id = WildCardCatchPattern                           base = CatchPattern
        <content link = WildcardPattern                         property = pattern

    <syntax id = IdentifierCatchPattern                         base = CatchPattern
        <content identifier                                     property = name
        <content link = ExplicitMemberExpression       optional property = member

    <syntax id = Postfix                      multiple abstract
        <content link = OperatorPostfix
        <content link = FunctionCall
        <content link = ExplicitMemberExpression
        <content link = Subscript

    <syntax id = OperatorPostfix                                base = Postfix
        <content postfixoperator                                property = postfixOperator

    <syntax id = FunctionCall                                   base = Postfix
        <content link = ParenthesizedExpression                 property = arguments
        <content link = CatchClause           multiple optional property = catchClauses

    <syntax id = ExplicitMemberExpression                       base = Postfix
        <content link = dot
        <content link = MemberPostfix                           property = memberPostfix

    <syntax id = Subscript                                      base = Postfix
        <content link = leftBracket
        <content link = ExpressionElement     multiple          property = expressions
        <content link = rightBracket

    <syntax id = ExpressionElement            multiple
        <content link = Expression                              property = expression
        <content link = comma                          optional

    <syntax id = MemberPostfix                         abstract
        <content link = NamedMemberPostfix

    <syntax id = NamedMemberPostfix                             base = MemberPostfix
        <content link = IdentifierExpression                    property = identifier

    <syntax id = PrimaryExpression                     abstract
        <content link = IdentifierExpression
        <content link = LiteralExpression
        <content link = IfExpression
        <content link = SwitchExpression
        <content link = ForExpression
        <content link = WhileExpression
        <content link = RepeatExpression
        <content link = ParenthesizedExpression
        <content link = ReturnExpression
        <content link = ThrowExpression
        <content link = BreakExpression
        <content link = ConstructorCall
        <content link = ThisExpression
        <content link = SuperExpression
        <content link = NullExpression

    <syntax id = IdentifierExpression                           base = PrimaryExpression
        <content identifier                                     property = name

    <syntax id = LiteralExpression                              base = PrimaryExpression
        <content literal                                        property = literal

    <syntax id = IfExpression                                   base = PrimaryExpression
        <content link = if
        <content link = Expression                              property = condition
        <content link = Expression                              property = consequent
        <content link = ElseClause                     optional property = elseClause

    <syntax id = SwitchExpression                               base = PrimaryExpression
        <content link = switch
        <content link = Expression                              property = expression
        <content link = SwitchBody                              property = body

    <syntax id = ForExpression                                  base = PrimaryExpression
        <content link = for
        <content link = Pattern                                 property = pattern
        <content link = in
        <content link = Expression                              property = expression
        <content link = Expression                              property = code

    <syntax id = WhileExpression                                base = PrimaryExpression
        <content link = while
        <content link = Expression                              property = condition
        <content link = Expression                              property = code

    <syntax id = RepeatExpression                               base = PrimaryExpression
        <content link = repeat
        <content link = Expression                              property = code
        <content link = while
        <content link = Expression                              property = condition

    <syntax id = ParenthesizedExpression                        base = PrimaryExpression
        <content link = leftParen
        <content link = ExpressionElement     multiple optional property = expressionElements
        <content link = rightParen

    <syntax id = ReturnExpression                               base = PrimaryExpression
        <content link = return
        <content link = ParenthesizedExpression        optional property = expression

    <syntax id = ThrowExpression                                base = PrimaryExpression
        <content link = throw
        <content link = IdentifierExpression                    property = error
        <content link = ParenthesizedExpression        optional property = arguments

    <syntax id = BreakExpression                                base = PrimaryExpression
        <content link = break
        <content link = ParenthesizedExpression                 optional property = expression

    <syntax id = ConstructorCall                                base = PrimaryExpression
        <content link = new
        <content link = Type                                    property = typeToInitialize
        <content link = ParenthesizedExpression                 property = arguments
        <content link = CatchClause           multiple optional property = catchClauses

    <syntax id = ThisExpression                                 base = PrimaryExpression
        <content link = this

    <syntax id = SuperExpression                       abstract base = PrimaryExpression
        <content link = SuperDot
        <content link = SuperSubscript

    <syntax id = SuperDot                                       base = SuperExpression
        <content link = super
        <content link = dot
        <content link = CommonSuperMember                       property = member

    <syntax id = SuperSubscript                                 base = SuperExpression
        <content link = super
        <content link = Subscript                               property = subscript

    <syntax id = NullExpression                                 base = PrimaryExpression
        <content link = null

    <syntax id = ElseClause
        <content link = else
        <content link = Expression                              property = alternative

    <syntax id = SwitchBody                            abstract
        <content link = CurliedSwitchBody
        <content link = NakedSwitchBody

    <syntax id = CurliedSwitchBody                              base = SwitchBody
        <content link = leftCurly
        <content link = SwitchCase            multiple          property = cases
        <content link = rightCurly

    <syntax id = NakedSwitchBody                                base = SwitchBody
        <content link = SwitchCase            multiple          property = cases

    <syntax id = SwitchCase                   multiple
        <content link = CaseLabel                               property = label
        <content link = CaseContent                             property = content

    <syntax id = CaseLabel                    abstract
        <content link = ItemCaseLabel
        <content link = DefaultCaseLabel

    <syntax id = ItemCaseLabel                                  base = CaseLabel
        <content link = case
        <content link = Pattern                                 property = pattern
        <content link = CaseItem              multiple optional property = additionalPatterns
        <content link = colon

    <syntax id = DefaultCaseLabel                               base = CaseLabel
        <content link = default
        <content link = colon

    <syntax id = CaseItem                     multiple
        <content link = comma
        <content link = Pattern                                 property = pattern

   <syntax id = Pattern                                abstract
        <content link = WildcardPattern
        <content link = IdentifierPattern
        <content link = TuplePattern
        <content link = ExpressionPattern

    <syntax id = WildcardPattern                                base = Pattern
        <content link = underscore

    <syntax id = IdentifierPattern                              base = Pattern
        <content identifier                                     property = identifier
        <content link = TypeAnnotation                 optional property = annotationForType

    <syntax id = TuplePattern                                   base = Pattern
        <content link = leftParen
        <content link = TuplePatternElement   multiple          property = elements
        <content link = rightParen

    <syntax id = ExpressionPattern                              base = Pattern
        <content link = Expression                              property = expression

    <syntax id = TuplePatternElement          multiple
        <content link = Pattern                                 property = pattern
        <content link = comma                          optional

    <syntax id = CaseContent
        <content link = Statement             multiple          property = statements

    <syntax id = CommonSuperMember                     abstract
        <content link = SuperConstructor
        <content link = SuperMember

    <syntax id = SuperConstructor                               base = CommonSuperMember
        <content link = constructor

    <syntax id = SuperMember                                    base = CommonSuperMember
        <content identifier                                     property = name

    <syntax id = Type
        <content identifier                                     property = name
        <content link = Subtype                        optional property = subType
        <content link = TypePostfix           multiple optional property = postfixes

    <syntax id = TypeAnnotation
        <content link = colon
        <content link = Type                                    property = annotationForType

    <syntax id = Subtype
        <content link = dot
        <content link = Type                                    property = type

    <syntax id = TypePostfix                  multiple abstract
        <content link = OptionalType
        <content link = IndexedType

    <syntax id = OptionalType                                   base = TypePostfix
        <content link = questionMark

    <syntax id = IndexedType                                    base = TypePostfix
        <content link = leftBracket
        <content link = Type                           optional property = key
        <content link = rightBracket

    <syntax id = TypeInheritanceClause
        <content link = extends
        <content link = Inheritance           multiple optional property = inheritances

    <syntax id = Inheritance                  multiple
        <content link = Type                                    property = type
        <content link = comma                          optional

    <keyword id = use
    <keyword id = class
    <keyword id = function
    <keyword id = if
    <keyword id = else
    <keyword id = switch
    <keyword id = case
    <keyword id = default
    <keyword id = catch
    <keyword id = for
    <keyword id = in
    <keyword id = while
    <keyword id = repeat
    <keyword id = return
    <keyword id = throw
    <keyword id = break
    <keyword id = throws
    <keyword id = existing
    <keyword id = override
    <keyword id = static
    <keyword id = let
    <keyword id = var
    <keyword id = mutable
    <keyword id = is
    <keyword id = as
    <keyword id = constructor
    <keyword id = enum
    <keyword id = super
    <keyword id = this
    <keyword id = null
    <keyword id = new
    <keyword id = extends

    <punctuation id = equal             value = "="
    <punctuation id = leftAngular       value = "&lt;"
    <punctuation id = rightAngular      value = ">"
    <punctuation id = comma             value = ","
    <punctuation id = leftParen         value = "("
    <punctuation id = rightParen        value = ")"
    <punctuation id = leftCurly         value = "{"
    <punctuation id = rightCurly        value = "}"
    <punctuation id = leftBracket       value = "["
    <punctuation id = rightBracket      value = "]"
    <punctuation id = colon             value = ":"
    <punctuation id = dot               value = "."
    <punctuation id = questionMark      value = "?"
    <punctuation id = underscore        value = "_"

</language>
