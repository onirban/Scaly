class MyVisitor extends SyntaxVisitor {
    function openProgram(program: Program): bool {
        return(true)
    }

    function closeProgram(program: Program) {
    }

    function openCompilationUnit(compilationUnit: CompilationUnit): bool {
        return(true)
    }

    function closeCompilationUnit(compilationUnit: CompilationUnit) {
    }

    function openConstantDeclaration(constantDeclaration: ConstantDeclaration): bool {
        return(true)
    }

    function closeConstantDeclaration(constantDeclaration: ConstantDeclaration) {
    }

    function openVariableDeclaration(variableDeclaration: VariableDeclaration): bool {
        return(true)
    }

    function closeVariableDeclaration(variableDeclaration: VariableDeclaration) {
    }

    function openMutableDeclaration(mutableDeclaration: MutableDeclaration): bool {
        return(true)
    }

    function closeMutableDeclaration(mutableDeclaration: MutableDeclaration) {
    }

    function openFunctionDeclaration(functionDeclaration: FunctionDeclaration): bool {
        return(true)
    }

    function closeFunctionDeclaration(functionDeclaration: FunctionDeclaration) {
    }

    function openEnumDeclaration(enumDeclaration: EnumDeclaration): bool {
        return(true)
    }

    function closeEnumDeclaration(enumDeclaration: EnumDeclaration) {
    }

    function openClassDeclaration(classDeclaration: ClassDeclaration): bool {
        return(true)
    }

    function closeClassDeclaration(classDeclaration: ClassDeclaration) {
    }

    function openConstructorDeclaration(constructorDeclaration: ConstructorDeclaration): bool {
        return(true)
    }

    function closeConstructorDeclaration(constructorDeclaration: ConstructorDeclaration) {
    }

    function openCodeBlock(codeBlock: CodeBlock): bool {
        return(true)
    }

    function closeCodeBlock(codeBlock: CodeBlock) {
    }

    function openSimpleExpression(simpleExpression: SimpleExpression): bool {
        return(true)
    }

    function closeSimpleExpression(simpleExpression: SimpleExpression) {
    }

    function openInitializer(initializer: Initializer): bool {
        return(true)
    }

    function closeInitializer(initializer: Initializer) {
    }

    function openBindingInitializer(bindingInitializer: BindingInitializer): bool {
        return(true)
    }

    function closeBindingInitializer(bindingInitializer: BindingInitializer) {
    }

    function openPatternInitializer(patternInitializer: PatternInitializer): bool {
        return(true)
    }

    function closePatternInitializer(patternInitializer: PatternInitializer) {
    }

    function openAdditionalInitializer(additionalInitializer: AdditionalInitializer): bool {
        return(true)
    }

    function closeAdditionalInitializer(additionalInitializer: AdditionalInitializer) {
    }

    function visitOverrideWord(overrideWord: OverrideWord) {
    }

    function visitStaticWord(staticWord: StaticWord) {
    }

    function openFunctionSignature(functionSignature: FunctionSignature): bool {
        return(true)
    }

    function closeFunctionSignature(functionSignature: FunctionSignature) {
    }

    function openFunctionResult(functionResult: FunctionResult): bool {
        return(true)
    }

    function closeFunctionResult(functionResult: FunctionResult) {
    }

    function visitExistingClause(existingClause: ExistingClause) {
    }

    function openParameterClause(parameterClause: ParameterClause): bool {
        return(true)
    }

    function closeParameterClause(parameterClause: ParameterClause) {
    }

    function openConstParameter(constParameter: ConstParameter): bool {
        return(true)
    }

    function closeConstParameter(constParameter: ConstParameter) {
    }

    function openVarParameter(varParameter: VarParameter): bool {
        return(true)
    }

    function closeVarParameter(varParameter: VarParameter) {
    }

    function openThrowsClause(throwsClause: ThrowsClause): bool {
        return(true)
    }

    function closeThrowsClause(throwsClause: ThrowsClause) {
    }

    function openEnumMember(enumMember: EnumMember): bool {
        return(true)
    }

    function closeEnumMember(enumMember: EnumMember) {
    }

    function visitEnumCase(enumCase: EnumCase) {
    }

    function openAdditionalCase(additionalCase: AdditionalCase): bool {
        return(true)
    }

    function closeAdditionalCase(additionalCase: AdditionalCase) {
    }

    function openClassBody(classBody: ClassBody): bool {
        return(true)
    }

    function closeClassBody(classBody: ClassBody) {
    }

    function openClassMember(classMember: ClassMember): bool {
        return(true)
    }

    function closeClassMember(classMember: ClassMember) {
    }

    function openPrefixExpression(prefixExpression: PrefixExpression): bool {
        return(true)
    }

    function closePrefixExpression(prefixExpression: PrefixExpression) {
    }

    function openPostfixExpression(postfixExpression: PostfixExpression): bool {
        return(true)
    }

    function closePostfixExpression(postfixExpression: PostfixExpression) {
    }

    function openBinaryOperation(binaryOperation: BinaryOperation): bool {
        return(true)
    }

    function closeBinaryOperation(binaryOperation: BinaryOperation) {
    }

    function openAssignment(assignment: Assignment): bool {
        return(true)
    }

    function closeAssignment(assignment: Assignment) {
    }

    function openTypeQuery(typeQuery: TypeQuery): bool {
        return(true)
    }

    function closeTypeQuery(typeQuery: TypeQuery) {
    }

    function openTypeCast(typeCast: TypeCast): bool {
        return(true)
    }

    function closeTypeCast(typeCast: TypeCast) {
    }

    function openCatchClause(catchClause: CatchClause): bool {
        return(true)
    }

    function closeCatchClause(catchClause: CatchClause) {
    }

    function openWildCardCatchPattern(wildCardCatchPattern: WildCardCatchPattern): bool {
        return(true)
    }

    function closeWildCardCatchPattern(wildCardCatchPattern: WildCardCatchPattern) {
    }

    function openIdentifierCatchPattern(identifierCatchPattern: IdentifierCatchPattern): bool {
        return(true)
    }

    function closeIdentifierCatchPattern(identifierCatchPattern: IdentifierCatchPattern) {
    }

    function visitOperatorPostfix(operatorPostfix: OperatorPostfix) {
    }

    function openFunctionCall(functionCall: FunctionCall): bool {
        return(true)
    }

    function closeFunctionCall(functionCall: FunctionCall) {
    }

    function visitMemberExpression(memberExpression: MemberExpression) {
    }

    function openSubscript(subscript: Subscript): bool {
        return(true)
    }

    function closeSubscript(subscript: Subscript) {
    }

    function openExpressionElement(expressionElement: ExpressionElement): bool {
        return(true)
    }

    function closeExpressionElement(expressionElement: ExpressionElement) {
    }

    function visitIdentifierExpression(identifierExpression: IdentifierExpression) {
    }

    function visitLiteralExpression(literalExpression: LiteralExpression) {
    }

    function openIfExpression(ifExpression: IfExpression): bool {
        return(true)
    }

    function closeIfExpression(ifExpression: IfExpression) {
    }

    function openSwitchExpression(switchExpression: SwitchExpression): bool {
        return(true)
    }

    function closeSwitchExpression(switchExpression: SwitchExpression) {
    }

    function openForExpression(forExpression: ForExpression): bool {
        return(true)
    }

    function closeForExpression(forExpression: ForExpression) {
    }

    function openWhileExpression(whileExpression: WhileExpression): bool {
        return(true)
    }

    function closeWhileExpression(whileExpression: WhileExpression) {
    }

    function openDoExpression(doExpression: DoExpression): bool {
        return(true)
    }

    function closeDoExpression(doExpression: DoExpression) {
    }

    function openParenthesizedExpression(parenthesizedExpression: ParenthesizedExpression): bool {
        return(true)
    }

    function closeParenthesizedExpression(parenthesizedExpression: ParenthesizedExpression) {
    }

    function openReturnExpression(returnExpression: ReturnExpression): bool {
        return(true)
    }

    function closeReturnExpression(returnExpression: ReturnExpression) {
    }

    function openThrowExpression(throwExpression: ThrowExpression): bool {
        return(true)
    }

    function closeThrowExpression(throwExpression: ThrowExpression) {
    }

    function openBreakExpression(breakExpression: BreakExpression): bool {
        return(true)
    }

    function closeBreakExpression(breakExpression: BreakExpression) {
    }

    function openConstructorCall(constructorCall: ConstructorCall): bool {
        return(true)
    }

    function closeConstructorCall(constructorCall: ConstructorCall) {
    }

    function visitThisExpression(thisExpression: ThisExpression) {
    }

    function visitNullExpression(nullExpression: NullExpression) {
    }

    function openElseClause(elseClause: ElseClause): bool {
        return(true)
    }

    function closeElseClause(elseClause: ElseClause) {
    }

    function openCurliedSwitchBody(curliedSwitchBody: CurliedSwitchBody): bool {
        return(true)
    }

    function closeCurliedSwitchBody(curliedSwitchBody: CurliedSwitchBody) {
    }

    function openNakedSwitchBody(nakedSwitchBody: NakedSwitchBody): bool {
        return(true)
    }

    function closeNakedSwitchBody(nakedSwitchBody: NakedSwitchBody) {
    }

    function openSwitchCase(switchCase: SwitchCase): bool {
        return(true)
    }

    function closeSwitchCase(switchCase: SwitchCase) {
    }

    function openItemCaseLabel(itemCaseLabel: ItemCaseLabel): bool {
        return(true)
    }

    function closeItemCaseLabel(itemCaseLabel: ItemCaseLabel) {
    }

    function visitDefaultCaseLabel(defaultCaseLabel: DefaultCaseLabel) {
    }

    function openCaseItem(caseItem: CaseItem): bool {
        return(true)
    }

    function closeCaseItem(caseItem: CaseItem) {
    }

    function visitWildcardPattern(wildcardPattern: WildcardPattern) {
    }

    function openIdentifierPattern(identifierPattern: IdentifierPattern): bool {
        return(true)
    }

    function closeIdentifierPattern(identifierPattern: IdentifierPattern) {
    }

    function openTuplePattern(tuplePattern: TuplePattern): bool {
        return(true)
    }

    function closeTuplePattern(tuplePattern: TuplePattern) {
    }

    function openExpressionPattern(expressionPattern: ExpressionPattern): bool {
        return(true)
    }

    function closeExpressionPattern(expressionPattern: ExpressionPattern) {
    }

    function openTuplePatternElement(tuplePatternElement: TuplePatternElement): bool {
        return(true)
    }

    function closeTuplePatternElement(tuplePatternElement: TuplePatternElement) {
    }

    function openCaseContent(caseContent: CaseContent): bool {
        return(true)
    }

    function closeCaseContent(caseContent: CaseContent) {
    }

    function openType(type: Type): bool {
        return(true)
    }

    function closeType(type: Type) {
    }

    function openTypeAnnotation(typeAnnotation: TypeAnnotation): bool {
        return(true)
    }

    function closeTypeAnnotation(typeAnnotation: TypeAnnotation) {
    }

    function openSubtype(subtype: Subtype): bool {
        return(true)
    }

    function closeSubtype(subtype: Subtype) {
    }

    function openIndexedType(indexedType: IndexedType): bool {
        return(true)
    }

    function closeIndexedType(indexedType: IndexedType) {
    }

    function openTypeInheritanceClause(typeInheritanceClause: TypeInheritanceClause): bool {
        return(true)
    }

    function closeTypeInheritanceClause(typeInheritanceClause: TypeInheritanceClause) {
    }

    function openInheritance(inheritance: Inheritance): bool {
        return(true)
    }

    function closeInheritance(inheritance: Inheritance) {
    }
}