class MyVisitor {
    function openProgram(program: Program) -> bool {
        programName = program.name
        programDirectory = program.directory
        return true; }

    function closeProgram(program: Program) {
        programName = null
        programDirectory = null }

    mutable programName: String
    mutable programDirectory: String

    function openCompilationUnit(compilationUnit: CompilationUnit) -> bool {
        return true; }

    function closeCompilationUnit(compilationUnit: CompilationUnit) { }


    function openStatementWithSemicolon(statementWithSemicolon: StatementWithSemicolon) -> bool {
        return true; }

    function closeStatementWithSemicolon(statementWithSemicolon: StatementWithSemicolon) { }


    function openUseDeclaration(useDeclaration: UseDeclaration) -> bool {
        return true; }

    function closeUseDeclaration(useDeclaration: UseDeclaration) { }


    function openConstantDeclaration(constantDeclaration: ConstantDeclaration) -> bool {
        return true; }

    function closeConstantDeclaration(constantDeclaration: ConstantDeclaration) { }


    function openVariableDeclaration(variableDeclaration: VariableDeclaration) -> bool {
        return true; }

    function closeVariableDeclaration(variableDeclaration: VariableDeclaration) { }


    function openFunctionDeclaration(functionDeclaration: FunctionDeclaration) -> bool {
        return true; }

    function closeFunctionDeclaration(functionDeclaration: FunctionDeclaration) { }


    function openEnumDeclaration(enumDeclaration: EnumDeclaration) -> bool {
        enumDeclarationName = enumDeclaration.name
        return true; }

    function closeEnumDeclaration(enumDeclaration: EnumDeclaration) {
        enumDeclarationName = null }

    mutable enumDeclarationName: String

    function openClassDeclaration(classDeclaration: ClassDeclaration) -> bool {
        classDeclarationName = classDeclaration.name
        return true; }

    function closeClassDeclaration(classDeclaration: ClassDeclaration) {
        classDeclarationName = null }

    mutable classDeclarationName: String

    function openInitializerDeclaration(initializerDeclaration: InitializerDeclaration) -> bool {
        return true; }

    function closeInitializerDeclaration(initializerDeclaration: InitializerDeclaration) { }


    function openCodeBlock(codeBlock: CodeBlock) -> bool {
        return true; }

    function closeCodeBlock(codeBlock: CodeBlock) { }


    function openSimpleExpression(simpleExpression: SimpleExpression) -> bool {
        return true; }

    function closeSimpleExpression(simpleExpression: SimpleExpression) { }


    function openPathIdentifier(pathIdentifier: PathIdentifier) -> bool {
        return true; }

    function closePathIdentifier(pathIdentifier: PathIdentifier) { }


    function visitPathItem(pathItem: PathItem) { }

    mutable pathItemName: String

    function openInitializer(initializer: Initializer) -> bool {
        return true; }

    function closeInitializer(initializer: Initializer) { }


    function openBindingInitializer(bindingInitializer: BindingInitializer) -> bool {
        return true; }

    function closeBindingInitializer(bindingInitializer: BindingInitializer) { }


    function openPatternInitializer(patternInitializer: PatternInitializer) -> bool {
        return true; }

    function closePatternInitializer(patternInitializer: PatternInitializer) { }


    function openAdditionalInitializer(additionalInitializer: AdditionalInitializer) -> bool {
        return true; }

    function closeAdditionalInitializer(additionalInitializer: AdditionalInitializer) { }


    function visitOverrideWord(overrideWord: OverrideWord) { }


    function visitStaticWord(staticWord: StaticWord) { }


    function visitIdentifierFunction(identifierFunction: IdentifierFunction) { }

    mutable identifierFunctionName: String

    function openFunctionSignature(functionSignature: FunctionSignature) -> bool {
        return true; }

    function closeFunctionSignature(functionSignature: FunctionSignature) { }


    function openFunctionResult(functionResult: FunctionResult) -> bool {
        return true; }

    function closeFunctionResult(functionResult: FunctionResult) { }


    function openParameterClause(parameterClause: ParameterClause) -> bool {
        return true; }

    function closeParameterClause(parameterClause: ParameterClause) { }


    function openConstParameter(constParameter: ConstParameter) -> bool {
        constParameterName = constParameter.name
        return true; }

    function closeConstParameter(constParameter: ConstParameter) {
        constParameterName = null }

    mutable constParameterName: String

    function openVarParameter(varParameter: VarParameter) -> bool {
        varParameterName = varParameter.name
        return true; }

    function closeVarParameter(varParameter: VarParameter) {
        varParameterName = null }

    mutable varParameterName: String

    function openThrowsClause(throwsClause: ThrowsClause) -> bool {
        return true; }

    function closeThrowsClause(throwsClause: ThrowsClause) { }


    function openEnumMember(enumMember: EnumMember) -> bool {
        return true; }

    function closeEnumMember(enumMember: EnumMember) { }


    function openTupleType(tupleType: TupleType) -> bool {
        return true; }

    function closeTupleType(tupleType: TupleType) { }


    function openAdditionalType(additionalType: AdditionalType) -> bool {
        return true; }

    function closeAdditionalType(additionalType: AdditionalType) { }


    function visitEnumCase(enumCase: EnumCase) { }

    mutable enumCaseName: String

    function openAdditionalCase(additionalCase: AdditionalCase) -> bool {
        return true; }

    function closeAdditionalCase(additionalCase: AdditionalCase) { }


    function openClassBody(classBody: ClassBody) -> bool {
        return true; }

    function closeClassBody(classBody: ClassBody) { }


    function openGenericArgumentClause(genericArgumentClause: GenericArgumentClause) -> bool {
        return true; }

    function closeGenericArgumentClause(genericArgumentClause: GenericArgumentClause) { }


    function visitGenericParameter(genericParameter: GenericParameter) { }

    mutable genericParameterTypeName: String

    function openClassMember(classMember: ClassMember) -> bool {
        return true; }

    function closeClassMember(classMember: ClassMember) { }


    function openPrefixExpression(prefixExpression: PrefixExpression) -> bool {
        return true; }

    function closePrefixExpression(prefixExpression: PrefixExpression) { }


    function openPostfixExpression(postfixExpression: PostfixExpression) -> bool {
        return true; }

    function closePostfixExpression(postfixExpression: PostfixExpression) { }


    function openBinaryOperation(binaryOperation: BinaryOperation) -> bool {
        return true; }

    function closeBinaryOperation(binaryOperation: BinaryOperation) { }


    function openAssignment(assignment: Assignment) -> bool {
        return true; }

    function closeAssignment(assignment: Assignment) { }


    function openTypeQuery(typeQuery: TypeQuery) -> bool {
        return true; }

    function closeTypeQuery(typeQuery: TypeQuery) { }


    function openTypeCast(typeCast: TypeCast) -> bool {
        return true; }

    function closeTypeCast(typeCast: TypeCast) { }


    function openCatchClause(catchClause: CatchClause) -> bool {
        return true; }

    function closeCatchClause(catchClause: CatchClause) { }


    function openWildCardCatchPattern(wildCardCatchPattern: WildCardCatchPattern) -> bool {
        return true; }

    function closeWildCardCatchPattern(wildCardCatchPattern: WildCardCatchPattern) { }


    function openPathItemCatchPattern(pathItemCatchPattern: PathItemCatchPattern) -> bool {
        return true; }

    function closePathItemCatchPattern(pathItemCatchPattern: PathItemCatchPattern) { }


    function visitOperatorPostfix(operatorPostfix: OperatorPostfix) { }


    function openFunctionCall(functionCall: FunctionCall) -> bool {
        return true; }

    function closeFunctionCall(functionCall: FunctionCall) { }


    function openExplicitMemberExpression(explicitMemberExpression: ExplicitMemberExpression) -> bool {
        return true; }

    function closeExplicitMemberExpression(explicitMemberExpression: ExplicitMemberExpression) { }


    function openSubscript(subscript: Subscript) -> bool {
        return true; }

    function closeSubscript(subscript: Subscript) { }


    function openExpressionElement(expressionElement: ExpressionElement) -> bool {
        return true; }

    function closeExpressionElement(expressionElement: ExpressionElement) { }


    function openNamedMemberPostfix(namedMemberPostfix: NamedMemberPostfix) -> bool {
        return true; }

    function closeNamedMemberPostfix(namedMemberPostfix: NamedMemberPostfix) { }


    function visitIdentifierExpression(identifierExpression: IdentifierExpression) { }

    mutable identifierExpressionName: String

    function visitLiteralExpression(literalExpression: LiteralExpression) { }


    function openIfExpression(ifExpression: IfExpression) -> bool {
        return true; }

    function closeIfExpression(ifExpression: IfExpression) { }


    function openSwitchExpression(switchExpression: SwitchExpression) -> bool {
        return true; }

    function closeSwitchExpression(switchExpression: SwitchExpression) { }


    function openForExpression(forExpression: ForExpression) -> bool {
        return true; }

    function closeForExpression(forExpression: ForExpression) { }


    function openParenthesizedExpression(parenthesizedExpression: ParenthesizedExpression) -> bool {
        return true; }

    function closeParenthesizedExpression(parenthesizedExpression: ParenthesizedExpression) { }


    function openReturnExpression(returnExpression: ReturnExpression) -> bool {
        return true; }

    function closeReturnExpression(returnExpression: ReturnExpression) { }


    function openThrowExpression(throwExpression: ThrowExpression) -> bool {
        return true; }

    function closeThrowExpression(throwExpression: ThrowExpression) { }


    function openBreakExpression(breakExpression: BreakExpression) -> bool {
        return true; }

    function closeBreakExpression(breakExpression: BreakExpression) { }


    function openInitializerCall(initializerCall: InitializerCall) -> bool {
        return true; }

    function closeInitializerCall(initializerCall: InitializerCall) { }


    function openThisDot(thisDot: ThisDot) -> bool {
        return true; }

    function closeThisDot(thisDot: ThisDot) { }


    function openThisSubscript(thisSubscript: ThisSubscript) -> bool {
        return true; }

    function closeThisSubscript(thisSubscript: ThisSubscript) { }


    function visitThisWord(thisWord: ThisWord) { }


    function openSuperDot(superDot: SuperDot) -> bool {
        return true; }

    function closeSuperDot(superDot: SuperDot) { }


    function openSuperSubscript(superSubscript: SuperSubscript) -> bool {
        return true; }

    function closeSuperSubscript(superSubscript: SuperSubscript) { }


    function openElseClause(elseClause: ElseClause) -> bool {
        return true; }

    function closeElseClause(elseClause: ElseClause) { }


    function openCurliedSwitchBody(curliedSwitchBody: CurliedSwitchBody) -> bool {
        return true; }

    function closeCurliedSwitchBody(curliedSwitchBody: CurliedSwitchBody) { }


    function openNakedSwitchBody(nakedSwitchBody: NakedSwitchBody) -> bool {
        return true; }

    function closeNakedSwitchBody(nakedSwitchBody: NakedSwitchBody) { }


    function openSwitchCase(switchCase: SwitchCase) -> bool {
        return true; }

    function closeSwitchCase(switchCase: SwitchCase) { }


    function openItemCaseLabel(itemCaseLabel: ItemCaseLabel) -> bool {
        return true; }

    function closeItemCaseLabel(itemCaseLabel: ItemCaseLabel) { }


    function visitDefaultCaseLabel(defaultCaseLabel: DefaultCaseLabel) { }


    function openCaseItem(caseItem: CaseItem) -> bool {
        return true; }

    function closeCaseItem(caseItem: CaseItem) { }


    function openForEach(forEach: ForEach) -> bool {
        return true; }

    function closeForEach(forEach: ForEach) { }


    function openPlainFor(plainFor: PlainFor) -> bool {
        return true; }

    function closePlainFor(plainFor: PlainFor) { }


    function visitWildcardPattern(wildcardPattern: WildcardPattern) { }


    function openIdentifierPattern(identifierPattern: IdentifierPattern) -> bool {
        identifierPatternIdentifier = identifierPattern.identifier
        return true; }

    function closeIdentifierPattern(identifierPattern: IdentifierPattern) {
        identifierPatternIdentifier = null }

    mutable identifierPatternIdentifier: String

    function openTuplePattern(tuplePattern: TuplePattern) -> bool {
        return true; }

    function closeTuplePattern(tuplePattern: TuplePattern) { }


    function openExpressionPattern(expressionPattern: ExpressionPattern) -> bool {
        return true; }

    function closeExpressionPattern(expressionPattern: ExpressionPattern) { }


    function openTuplePatternElement(tuplePatternElement: TuplePatternElement) -> bool {
        return true; }

    function closeTuplePatternElement(tuplePatternElement: TuplePatternElement) { }


    function openBlockCaseContent(blockCaseContent: BlockCaseContent) -> bool {
        return true; }

    function closeBlockCaseContent(blockCaseContent: BlockCaseContent) { }


    function visitEmptyCaseContent(emptyCaseContent: EmptyCaseContent) { }


    function visitThisInit(thisInit: ThisInit) { }


    function visitThisMember(thisMember: ThisMember) { }

    mutable thisMemberName: String

    function visitSuperInit(superInit: SuperInit) { }


    function visitSuperMember(superMember: SuperMember) { }

    mutable superMemberName: String

    function openTypeIdentifier(typeIdentifier: TypeIdentifier) -> bool {
        typeIdentifierName = typeIdentifier.name
        return true; }

    function closeTypeIdentifier(typeIdentifier: TypeIdentifier) {
        typeIdentifierName = null }

    mutable typeIdentifierName: String

    function openArrayType(arrayType: ArrayType) -> bool {
        return true; }

    function closeArrayType(arrayType: ArrayType) { }


    function openTypeAnnotation(typeAnnotation: TypeAnnotation) -> bool {
        return true; }

    function closeTypeAnnotation(typeAnnotation: TypeAnnotation) { }


    function openSubtypeIdentifier(subtypeIdentifier: SubtypeIdentifier) -> bool {
        return true; }

    function closeSubtypeIdentifier(subtypeIdentifier: SubtypeIdentifier) { }


    function visitOptionalType(optionalType: OptionalType) { }


    function openTypeInheritanceClause(typeInheritanceClause: TypeInheritanceClause) -> bool {
        return true; }

    function closeTypeInheritanceClause(typeInheritanceClause: TypeInheritanceClause) { }


    function openInheritance(inheritance: Inheritance) -> bool {
        return true; }

    function closeInheritance(inheritance: Inheritance) { }

}