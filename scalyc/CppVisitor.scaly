class Inherits {

    // Class to inherit from
    let name: string

    // Classes which inherit from the class
    mutable inheritors: string[]

    constructor(className: string) {
        name = new string(className)
        inheritors = new string[]()
    }
}

class CppVisitor extends Visitor {

    // Some rudimentary semantics cache
    mutable inherits: Inherits[]
    mutable classes: string[]

    function execute(program: Program) {
        program.accept(this)
    }

    function hasArrayPostfix(type: Type): bool {

        if type.postfixes == null
            return(false)

        let postfixes: TypePostfix[] = type.postfixes
        let typePostfix: TypePostfix = postfixes[0]

        if typePostfix is IndexedType
            return(true)

        false
    }

    function isClass(name: string): bool

    function appendCppType(mutable s: VarString, type: Type) {
        if hasArrayPostfix(type) {
            s.append("_Array<")
            appendCppTypeName(s, type)
            s.append(">*")
        }
        else {
            appendCppTypeName(s, type)
            if isClass(type.name) {
                s.append("*")
            }
        }
    }

    function appendCppTypeName(mutable s: VarString, type: Type) {
        let typeName: string = type.name
        if typeName.equals("number") {
            s.append("size_t")
            return
        }
        else {
            if typeName.equals("char") {
                s.append("char")
                return
            }
        }

        s.append(typeName)
    }

    function collectDerivedClasses(mutable derivedClasses: string[], className: string) {
        for inherit: Inherits in inherits {
            if inherit.name.equals(className)
                appendDerivedClasses(derivedClasses, inherit.inheritors)
        }
    }

    function appendDerivedClasses(mutable derivedClasses: string[], mutable inheritors: string[]) {
        for inheritor: string in inheritors {
            derivedClasses.push(inheritor)
            collectDerivedClasses(derivedClasses, inheritor)
        }
    }
}