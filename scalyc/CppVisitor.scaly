class Inherits {
    init(className: String) {
        name = className
        inheritors = [String]()
    }

    let name: String
    mutable inheritors: [String]
}


class CppVisitor : SyntaxVisitor {
    init() {}

    function execute(program: Program) -> CppError {
    }

    mutable cppError: CppError
    let moduleName: String
    mutable sourceFile: VarString
    mutable headerFile: VarString
    mutable headerIndentLevel: unsigned
    mutable sourceIndentLevel: unsigned
    mutable firstParameter: bool
    mutable firstBindingInitializer: bool
    mutable inherits: [Inherits]
    mutable classes: [String]
    mutable declaringClassMember: bool
    mutable inParameterClause: bool
    mutable abstractFunction: bool
    mutable staticFunction: bool
    mutable inEnumMember: bool
    mutable inFunctionReturn: bool
    mutable constDeclaration: bool
    mutable suppressSource: bool
    mutable suppressHeader: bool

    function buildProjectFileString(mutable projectFile: VarString, program: Program) {
    }

    function buildMainHeaderFileString(mutable projectFile: VarString, program: Program) {
    }

    function collectInheritances(program: Program) {
    }

    function collectInheritancesInCompilationUnit(compilationUnit: CompilationUnit) {
    }

    function registerInheritance(className: String, baseName: String) {
    }

    function collectDerivedClasses(mutable derivedClasses: [String], className: String) {
    }

    function appendDerivedClasses(mutable derivedClasses: [String], mutable inheritors: [String]) {
    }

    function appendCppTypeName(mutable s: VarString, typeIdentifier: TypeIdentifier) {
    }

    function appendCppType(mutable s: VarString, type: Type) {
    }

    function isClass(name: String) -> bool {
    }

    function indentHeader() {
    }

    function indentSource() {
    }

    function writeParameter(name: String, parameterType: Type) {
    }

    function openProgram(program: Program) -> bool {
        return true
    }

    function closeProgram(program: Program) {
    }

    function openCompilationUnit(compilationUnit: CompilationUnit) -> bool {
        return true
    }

    function closeCompilationUnit(compilationUnit: CompilationUnit) {
    }

    function openTerminatedStatement(terminatedStatement: TerminatedStatement) -> bool {
        return true
    }

    function closeTerminatedStatement(terminatedStatement: TerminatedStatement) {
    }

    function openUseDeclaration(useDeclaration: UseDeclaration) -> bool {
        return true
    }

    function closeUseDeclaration(useDeclaration: UseDeclaration) {
    }

    function openConstantDeclaration(constantDeclaration: ConstantDeclaration) -> bool {
        return true
    }

    function closeConstantDeclaration(constantDeclaration: ConstantDeclaration) {
    }

    function openVariableDeclaration(variableDeclaration: VariableDeclaration) -> bool {
        return true
    }

    function closeVariableDeclaration(variableDeclaration: VariableDeclaration) {
    }

    function openMutableDeclaration(mutableDeclaration: MutableDeclaration) -> bool {
        return true
    }

    function closeMutableDeclaration(mutableDeclaration: MutableDeclaration) {
    }

    function openFunctionDeclaration(functionDeclaration: FunctionDeclaration) -> bool {
        return true
    }

    function closeFunctionDeclaration(functionDeclaration: FunctionDeclaration) {
    }

    function openEnumDeclaration(enumDeclaration: EnumDeclaration) -> bool {
        return true
    }

    function closeEnumDeclaration(enumDeclaration: EnumDeclaration) {
    }

    function openClassDeclaration(classDeclaration: ClassDeclaration) -> bool {
        return true
    }

    function closeClassDeclaration(classDeclaration: ClassDeclaration) {
    }

    function openInitializerDeclaration(initializerDeclaration: InitializerDeclaration) -> bool {
        return true
    }

    function closeInitializerDeclaration(initializerDeclaration: InitializerDeclaration) {
    }

    function openCodeBlock(codeBlock: CodeBlock) -> bool {
        return true
    }

    function localAllocations(codeBlock: CodeBlock) -> bool {
        return false
    }

    function getFunctionCall(patternInitializer: PatternInitializer) -> existing FunctionCall {
        return null
    }

    function closeCodeBlock(codeBlock: CodeBlock) {
    }

    function openSimpleExpression(simpleExpression: SimpleExpression) -> bool {
        return true
    }

    function closeSimpleExpression(simpleExpression: SimpleExpression) {
    }

    function openPathIdentifier(pathIdentifier: PathIdentifier) -> bool {
        return true
    }

    function closePathIdentifier(pathIdentifier: PathIdentifier) {
    }

    function visitPathItem(pathItem: PathItem) {
    }

    function openInitializer(initializer: Initializer) -> bool {
        return true
    }

    function closeInitializer(initializer: Initializer) {
    }

    function openBindingInitializer(bindingInitializer: BindingInitializer) -> bool {
        return true
    }

    function closeBindingInitializer(bindingInitializer: BindingInitializer) {
    }

    function openPatternInitializer(patternInitializer: PatternInitializer) -> bool {
        return true
    }

    function closePatternInitializer(patternInitializer: PatternInitializer) {
    }

    function openAdditionalInitializer(additionalInitializer: AdditionalInitializer) -> bool {
        return true
    }

    function closeAdditionalInitializer(additionalInitializer: AdditionalInitializer) {
    }

    function visitOverrideWord(overrideWord: OverrideWord) {
    }

    function visitStaticWord(staticWord: StaticWord) {
    }

    function visitIdentifierFunction(identifierFunction: IdentifierFunction) {
    }

    function openFunctionSignature(functionSignature: FunctionSignature) -> bool {
        return true
    }

    function closeFunctionSignature(functionSignature: FunctionSignature) {
    }

    function openFunctionResult(functionResult: FunctionResult) -> bool {
        return true
    }

    function closeFunctionResult(functionResult: FunctionResult) {
    }

    function visitExistingClause(existingClause: ExistingClause) {
    }

    function openParameterClause(parameterClause: ParameterClause) -> bool {
        return true
    }

    function closeParameterClause(parameterClause: ParameterClause) {
    }

    function openConstParameter(constParameter: ConstParameter) -> bool {
        return true
    }

    function closeConstParameter(constParameter: ConstParameter) {
    }

    function openVarParameter(varParameter: VarParameter) -> bool {
        return true
    }

    function closeVarParameter(varParameter: VarParameter) {
    }

    function openThrowsClause(throwsClause: ThrowsClause) -> bool {
        return true
    }

    function closeThrowsClause(throwsClause: ThrowsClause) {
    }

    function openEnumMember(enumMember: EnumMember) -> bool {
        return true
    }

    function closeEnumMember(enumMember: EnumMember) {
    }

    function visitEnumCase(enumCase: EnumCase) {
    }

    function openAdditionalCase(additionalCase: AdditionalCase) -> bool {
        return true
    }

    function closeAdditionalCase(additionalCase: AdditionalCase) {
    }

    function openClassBody(classBody: ClassBody) -> bool {
        return true
    }

    function closeClassBody(classBody: ClassBody) {
    }

    function openGenericArgumentClause(genericArgumentClause: GenericArgumentClause) -> bool {
        return true
    }

    function closeGenericArgumentClause(genericArgumentClause: GenericArgumentClause) {
    }

    function visitGenericParameter(genericParameter: GenericParameter) {
    }

    function openClassMember(classMember: ClassMember) -> bool {
        return true
    }

    function closeClassMember(classMember: ClassMember) {
    }

    function openPrefixExpression(prefixExpression: PrefixExpression) -> bool {
        return true
    }

    function closePrefixExpression(prefixExpression: PrefixExpression) {
    }

    function openPostfixExpression(postfixExpression: PostfixExpression) -> bool {
        return true
    }

    function closePostfixExpression(postfixExpression: PostfixExpression) {
    }

    function openBinaryOperation(binaryOperation: BinaryOperation) -> bool {
        return true
    }

    function closeBinaryOperation(binaryOperation: BinaryOperation) {
    }

    function openAssignment(assignment: Assignment) -> bool {
        return true
    }

    function inInitializer(node: SyntaxNode) -> bool {
        return false;
    }

    function inReturn(node: SyntaxNode) -> bool {
        return false;
    }

    function inThrow(node: SyntaxNode) -> bool {
        return false;
    }

    function getMemberIfCreatingObject(assignment: Assignment) -> existing String {
    }

    function getFunctionName(assignment: Assignment) -> existing String {
    }
    
    function isCreatingObject(functionName: String, node: SyntaxNode) -> bool {
    }

    function getClassDeclaration(node: SyntaxNode) -> existing ClassDeclaration {
    }
    
    function isVariableMember(memberName: String, classDeclaration: ClassDeclaration) -> bool {
    }

    function closeAssignment(assignment: Assignment) {
    }

    function openTypeQuery(typeQuery: TypeQuery) -> bool {
        return true
    }

    function closeTypeQuery(typeQuery: TypeQuery) {
    }

    function openTypeCast(typeCast: TypeCast) -> bool {
        return true
    }

    function closeTypeCast(typeCast: TypeCast) {
    }

    function openCatchClause(catchClause: CatchClause) -> bool {
        return true
    }

    function closeCatchClause(catchClause: CatchClause) {
    }

    function openWildCardCatchPattern(wildCardCatchPattern: WildCardCatchPattern) -> bool {
        return true
    }

    function closeWildCardCatchPattern(wildCardCatchPattern: WildCardCatchPattern) {
    }

    function openPathItemCatchPattern(pathItemCatchPattern: PathItemCatchPattern) -> bool {
        return true
    }

    function closePathItemCatchPattern(pathItemCatchPattern: PathItemCatchPattern) {
    }

    function visitOperatorPostfix(operatorPostfix: OperatorPostfix) {
    }

    function openFunctionCall(functionCall: FunctionCall) -> bool {
        return true
    }

    function closeFunctionCall(functionCall: FunctionCall) {
    }

    function openExplicitMemberExpression(explicitMemberExpression: ExplicitMemberExpression) -> bool {
        return true
    }

    function closeExplicitMemberExpression(explicitMemberExpression: ExplicitMemberExpression) {
    }

    function openSubscript(subscript: Subscript) -> bool {
        return true
    }

    function closeSubscript(subscript: Subscript) {
    }

    function openExpressionElement(expressionElement: ExpressionElement) -> bool {
        return true
    }

    function closeExpressionElement(expressionElement: ExpressionElement) {
    }

    function isLastExpressionElement(expressionElement: ExpressionElement) -> bool {
        return false
    }

    function openNamedMemberPostfix(namedMemberPostfix: NamedMemberPostfix) -> bool {
        return true
    }

    function closeNamedMemberPostfix(namedMemberPostfix: NamedMemberPostfix) {
    }

    function visitIdentifierExpression(identifierExpression: IdentifierExpression) {
    }

    function inAssignment(syntaxNode: SyntaxNode) -> bool {
        return false
    }

    function getAssignment(syntaxNode: SyntaxNode) -> existing Assignment {
        return null
    }

    function visitLiteralExpression(literalExpression: LiteralExpression) {
    }

    function openIfExpression(ifExpression: IfExpression) -> bool {
        return true
    }

    function closeIfExpression(ifExpression: IfExpression) {
    }

    function openSwitchExpression(switchExpression: SwitchExpression) -> bool {
        return true
    }

    function closeSwitchExpression(switchExpression: SwitchExpression) {
    }

    function openForExpression(forExpression: ForExpression) -> bool {
        return true
    }

    function closeForExpression(forExpression: ForExpression) {
    }

    function openWhileExpression(whileExpression: WhileExpression) -> bool {
        return true
    }

    function closeWhileExpression(whileExpression: WhileExpression) {
    }

    function openRepeatExpression(repeatExpression: RepeatExpression) -> bool {
        return true
    }

    function closeRepeatExpression(repeatExpression: RepeatExpression) {
    }

    function openParenthesizedExpression(parenthesizedExpression: ParenthesizedExpression) -> bool {
        return true
    }

    function assignedToMutableObject(functionCall: FunctionCall) -> bool {
        return false
    }

    function assignedToConstantObject(functionCall: FunctionCall) -> bool {
        return false
    }

    function getBindingInitializer(functionCall: FunctionCall) -> existing BindingInitializer {
        return null
    }

    function callsInitializer(functionCall: FunctionCall) -> bool {
        return false
    }

    function catchesError(functionCall: FunctionCall) -> bool {
        return false
    }

    function closeParenthesizedExpression(parenthesizedExpression: ParenthesizedExpression) {
    }

    function openReturnExpression(returnExpression: ReturnExpression) -> bool {
        return true
    }

    function closeReturnExpression(returnExpression: ReturnExpression) {
    }

    function openThrowExpression(throwExpression: ThrowExpression) -> bool {
        return true
    }

    function getReturnType(throwExpression: ThrowExpression) -> String {
        return null
    }

    function getThrownType(throwExpression: ThrowExpression) -> String {
        return null
    }

    function returnsArray(syntaxNode: SyntaxNode) -> bool {
        return false
    }

    function getFunctionDeclaration(syntaxNode: SyntaxNode) -> existing FunctionDeclaration {
        return null
    }

    function closeThrowExpression(throwExpression: ThrowExpression) {
    }

    function openBreakExpression(breakExpression: BreakExpression) -> bool {
        return true
    }

    function closeBreakExpression(breakExpression: BreakExpression) {
    }

    function openInitializerCall(initializerCall: InitializerCall) -> bool {
        return true
    }

    function closeInitializerCall(initializerCall: InitializerCall) {
    }

    function visitThisExpression(thisExpression: ThisExpression) {
    }

    function openSuperDot(superDot: SuperDot) -> bool {
        return true
    }

    function closeSuperDot(superDot: SuperDot) {
    }

    function openSuperSubscript(superSubscript: SuperSubscript) -> bool {
        return true
    }

    function closeSuperSubscript(superSubscript: SuperSubscript) {
    }

    function visitNullExpression(nullExpression: NullExpression) {
    }

    function openElseClause(elseClause: ElseClause) -> bool {
        return true
    }

    function closeElseClause(elseClause: ElseClause) {
    }

    function openCurliedSwitchBody(curliedSwitchBody: CurliedSwitchBody) -> bool {
        return true
    }

    function closeCurliedSwitchBody(curliedSwitchBody: CurliedSwitchBody) {
    }

    function openNakedSwitchBody(nakedSwitchBody: NakedSwitchBody) -> bool {
        return true
    }

    function closeNakedSwitchBody(nakedSwitchBody: NakedSwitchBody) {
    }

    function openSwitchCase(switchCase: SwitchCase) -> bool {
        return true
    }

    function closeSwitchCase(switchCase: SwitchCase) {
    }

    function openItemCaseLabel(itemCaseLabel: ItemCaseLabel) -> bool {
        return true
    }

    function closeItemCaseLabel(itemCaseLabel: ItemCaseLabel) {
    }

    function visitDefaultCaseLabel(defaultCaseLabel: DefaultCaseLabel) {
    }

    function openCaseItem(caseItem: CaseItem) -> bool {
        return true
    }

    function closeCaseItem(caseItem: CaseItem) {
    }

    function visitWildcardPattern(wildcardPattern: WildcardPattern) {
    }

    function openIdentifierPattern(identifierPattern: IdentifierPattern) -> bool {
        return true
    }

    function isCatchingPatternInitializer(patternInitializer: PatternInitializer) -> bool {
        return false
    }

    function closeIdentifierPattern(identifierPattern: IdentifierPattern) {
    }

    function openTuplePattern(tuplePattern: TuplePattern) -> bool {
        return true
    }

    function closeTuplePattern(tuplePattern: TuplePattern) {
    }

    function openExpressionPattern(expressionPattern: ExpressionPattern) -> bool {
        return true
    }

    function closeExpressionPattern(expressionPattern: ExpressionPattern) {
    }

    function openTuplePatternElement(tuplePatternElement: TuplePatternElement) -> bool {
        return true
    }

    function closeTuplePatternElement(tuplePatternElement: TuplePatternElement) {
    }

    function openBlockCaseContent(blockCaseContent: BlockCaseContent) -> bool {
        return true
    }

    function closeBlockCaseContent(blockCaseContent: BlockCaseContent) {
    }

    function visitEmptyCaseContent(emptyCaseContent: EmptyCaseContent) {
    }

    function visitSuperInit(superInit: SuperInit) {
    }

    function visitSuperMember(superMember: SuperMember) {
    }

    function openTypeIdentifier(typeIdentifier: TypeIdentifier) -> bool {
        return true
    }

    function inArrayType(typeIdentifier: TypeIdentifier) -> bool {
        return false;
    }

    function inTypeQuery(typeIdentifier: TypeIdentifier) -> bool {
        return false;
    }

    function closeTypeIdentifier(typeIdentifier: TypeIdentifier) {
    }

    function openArrayType(arrayType: ArrayType) -> bool {
        return true
    }

    function closeArrayType(arrayType: ArrayType) {
    }

    function openTypeAnnotation(typeAnnotation: TypeAnnotation) -> bool {
        return true
    }

    function closeTypeAnnotation(typeAnnotation: TypeAnnotation) {
    }

    function openSubtypeIdentifier(subtypeIdentifier: SubtypeIdentifier) -> bool {
        return true
    }

    function closeSubtypeIdentifier(subtypeIdentifier: SubtypeIdentifier) {
    }

    function visitOptionalType(optionalType: OptionalType) {
    }

    function openTypeInheritanceClause(typeInheritanceClause: TypeInheritanceClause) -> bool {
        return true
    }

    function closeTypeInheritanceClause(typeInheritanceClause: TypeInheritanceClause) {
    }

    function openInheritance(inheritance: Inheritance) -> bool {
        return true
    }

    function closeInheritance(inheritance: Inheritance) {
    }
}
