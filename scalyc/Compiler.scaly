class Compiler {
    static function compileFiles(options: Options) throws CompilerError {
        let files: string[] = options.files
        mutable sources: string[]$ = new string[]()
        for file: string in files {
            let source: string~sources = File.readToString(file)
                catch FileError.noSuchFileOrDirectory(error: noSuchFileOrDirectory) throw fileNotFound(file)
                catch _ (error: FileError) throw unableToReadFile(file, error)
                
            sources.push(source)
        }

        mutable compilationUnits: CompilationUnit[] = new CompilationUnit[]()
        let index: number = 0
        for source: string in sources {
            let moduleName: string~compilationUnits = Path.getFileNameWithoutExtension(files[index])
            let compilationUnit: CompilationUnit~compilationUnits = parseUnit(moduleName, source)
                catch _ (error: CompilerError) throw syntaxError(error)

            compilationUnits.push(compilationUnit)
            index++
        }

        let program: Program$ = new Program(options.outputName, options.directory, new CompilationUnit[](compilationUnits))
        for item: CompilationUnit in compilationUnits
            item.parent = program
        
        mutable visitor: SourceVisitor = new SourceVisitor()
        
        visitor.execute(program)
    }

    static function parseUnit(moduleName: string, text: string): CompilationUnit throws ParserError {
        mutable parser: Parser$ = new Parser(moduleName, text)
        let compilationUnit: CompilationUnit = parser.parseCompilationUnit()
            catch _ (error: ParserError)
                throw error
        return(compilationUnit)
    }
}
