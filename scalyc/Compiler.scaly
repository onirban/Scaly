class Compiler {
    static function compileFiles(options: Options) throws CompilerError {
        let files: [String] = options.files
        mutable sources: [String] = [String]();
        for file: String in files {
            let source: String = File.readToString(file)
                catch FileError.noSuchFileOrDirectory(error: noSuchFileOrDirectory) throw fileNotFound(file)
                catch _ (error: FileError) throw unableToReadFile(file, error)
                
            sources.push(source)
        }

        mutable compilationUnits: [CompilationUnit] = [CompilationUnit]();
        let index: unsigned = 0
        for source: String in sources {
            let moduleName: String = Path.getFileNameWithoutExtension(files[index])
            let compilationUnit: CompilationUnit = parseUnit(moduleName, source)
                catch _ (error: CompilerError) throw syntaxError(error)

            compilationUnits.push(compilationUnit);
            index++
        }

        mutable program: Program = Program(options.outputName, options.directory, [CompilationUnit](compilationUnits))
        for item: CompilationUnit in compilationUnits
            item.parent = program
        
        mutable visitor: CppVisitor = CppVisitor()
        
        visitor.execute(program)
    }

    static function parseUnit(moduleName: String, text: String) -> CompilationUnit throws ParserError {
        mutable parser: Parser = Parser(moduleName, text)
        let compilationUnit: CompilationUnit = parser.parseCompilationUnit()
            catch _ (error: ParserError)
                throw error
        return compilationUnit
    }
};
