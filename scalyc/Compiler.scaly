class Compiler {
    static function compileFiles(options: Options) {
        let files: string[] = options.files
        mutable sources: string[]$ = new string[]()
        for file: string in files {
            let source: string@sources = File.readToString(file)
                catch FileError.noSuchFileOrDirectory(error: noSuchFileOrDirectory) return
                
            sources.push(source)
        }

        mutable compilationUnits: CompilationUnit[]$ = new CompilationUnit[]()
        let index: number = 0
        for source: string in sources {
            let moduleName: string@compilationUnits = Path.getFileNameWithoutExtension(files[index])
            let compilationUnit: CompilationUnit@compilationUnits = parseUnit(moduleName, source)
            if compilationUnit == null
                return

            compilationUnits.push(compilationUnit)
            index++
        }

        let program: Program$ = new Program(options.outputName, options.directory, new CompilationUnit[](compilationUnits))
        for item: CompilationUnit in compilationUnits
            item.parent = program

        mutable headerVisitor: HeaderVisitor$ = new HeaderVisitor()        
        headerVisitor.execute(program)

        mutable sourceVisitor: SourceVisitor$ = new SourceVisitor()        
        sourceVisitor.execute(program)
    }

    static function parseUnit(moduleName: string, text: string): CompilationUnit {
        mutable parser: Parser$ = new Parser(moduleName, text)
        let compilationUnit: CompilationUnit = parser.parseCompilationUnit()
        return(compilationUnit)
    }
}
