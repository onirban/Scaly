class Compiler {
    static function compileFiles(options: Options) throws CompilerError {
        let files: [String] = options.files
        mutable sources: [String] = [String]();
        for file: String in files {
            let source: String = File.readToString(file)
                catch _ (file, error) throw CompilerError.UnableToReadFile(file, error)
                
            sources.push(source)
        }

        mutable compilationUnits: [CompilationUnit] = [CompilationUnit]();
        let index: unsigned = 0
        for source: String in sources {
            let compilationUnit: CompilationUnit = compileUnit(source, files[index])
                catch _ (_, error) throw CompilerError.SyntaxError(error)

            compilationUnits.push(compilationUnit);
            index++
        }

        mutable program: Program = Program()
        program.name = options.outputName
        program.compilationUnits = compilationUnits

        mutable visitor: CppVisitor = CppVisitor()
        program.Accept(visitor)
    }

    static function compileUnit(fileName: String, text: String) -> CompilationUnit throws ParserError {
        parser = Parser(fileName, text)
        parser.parseTopLevelDeclaration
    }
};
