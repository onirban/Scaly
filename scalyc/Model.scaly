class Unit

// The model of the complete program on which all back ends (apart from legacy Cpp Visitors) work.
class Model {

    let name: string
    let units: Unit[]

    constructor(name: string) {
        this.name = name
        units = new Unit[]()
    }
}

// Base class for functions, classes, enums and the like.
class Definition {
}

// A part of the program which corresponds to a single compilation unit.
class Unit {    

    // The model which contains the unit
    let model: Model
    
    // The definitions of the unit.
    mutable definitions: Definition[]

    // Default constructor
    constructor() {
        definitions = new Definition[]()
    }

    constructor(model: Model) {
        this.model = model
        definitions = new Definition[]()
    }
}

// An action of working code.
class Action {
}

// A top level program unit which in addition to definitions can contain top level actions.
class TopLevel extends Unit {

    mutable actions: Action[]

    constructor(model: Model) {
        this.model = model
        actions = new Action[]()
    }
}


class ModelVisitor extends CommonVisitor {

    mutable model: Model
    mutable unit: Unit

    function openProgram(program: Program) : bool {
        model = new Model(program.name)
        
        true
    }

    function openCompilationUnit(compilationUnit: CompilationUnit) : bool {
        if isTopLevelFile(compilationUnit) {
            unit = new TopLevel(model)
        }
        else {
            unit = new Unit(model)
        }

        true
    }

    function closeCompilationUnit(compilationUnit: CompilationUnit) {
        model.units.push(unit)
    }

    function openConstantDeclaration(constantDeclaration: ConstantDeclaration): bool {
        if constantDeclaration.parent is CodeBlock {
        }
        else {
            if constantDeclaration.parent is ClassDeclaration {
                // Create a new const class member
            }
            else { 
                if constantDeclaration.parent is CompilationUnit {
                    // Create a new binding member
                }
                else {
                    // Should not happen
                }
            }
            
        }
        true
    }

    function closeConstantDeclaration(constantDeclaration: ConstantDeclaration) {
        if constantDeclaration.parent is CodeBlock {
        }
        else {
            if constantDeclaration.parent is ClassDeclaration {
                // Extend the constant declarations of the current class by the current const class member
            }
            else { 
                if constantDeclaration.parent is CompilationUnit {
                    // Extend the current binding by the current binding member
                }
                else {
                    // Should not happen
                }
            }
            
        }
    }
}