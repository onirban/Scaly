class Unit

// The model of the complete program on which all back ends (apart from legacy Cpp Visitors) work.
class Model {

    let name: string
    let units: Unit[]

    constructor(name: string) {
        this.name = name
        units = new Unit[]()
    }
}

// Base class for functions, classes, enums and the like.
class Definition {
}

// A part of the program which corresponds to a single compilation unit.
class Unit {    

    // The model which contains the unit
    let model: Model
    
    // The definitions of the unit.
    let definitions: Definition[]
    
    constructor(model: Model) {
        this.model = model
        definitions = new Definition[]()
    }
}

// An action of working code.
class Action {
}

// A top level program unit which in addition to definitions can contain top level actions.
class TopLevel extends Unit {

    let items: Action[]
    
    constructor(model: Model) {
        this.model = model
        definitions = new Definition[]()
        actions = new Action[]()
    }
}


class ModelVisitor extends CommonVisitor {

    mutable model: Model
    mutable unit: Unit

    function openProgram(program: Program) : bool {
        model = new Model(program.name)
        
        true
    }

    function openCompilationUnit(compilationUnit: CompilationUnit) : bool {
        if isTopLevelFile(compilationUnit) {
            unit = new TopLevelCode(model)
        }
        else {
            unit = new Code(model)
        }

        true
    }

    function closeCompilationUnit(compilationUnit: CompilationUnit) {
        model.units.push(unit)
    }

    function openConstantDeclaration(constantDeclaration: ConstantDeclaration): bool {
        if constantDeclaration.parent is ClassDeclaration {
        }
        true
    }

    function closeConstantDeclaration(constantDeclaration: ConstantDeclaration) {
    }
}