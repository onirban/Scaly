class Unit

class Model {

    let name: string
    let units: Unit[]

    constructor(name: string) {
        this.name = name
        units = new Unit[]()
    }
}

class Unit {
    let model: Model
}

class Item {
}

class Definition extends Item {
}

class TopLevelCode extends Unit {

    let items: Item[]
    
    constructor(model: Model) {
        this.model = model
        items = new Item[]()
    }
}

class Code extends Unit {
    
    let definitions: Definition[]
    
    constructor(model: Model) {
        this.model = model
        definitions = new Definition[]()
    }
}

class ModelVisitor extends CommonVisitor {

    mutable model: Model
    mutable unit: Unit

    function openProgram(program: Program) : bool {
        model = new Model(program.name)
        
        true
    }

    function openCompilationUnit(compilationUnit: CompilationUnit) : bool {
        if isTopLevelFile(compilationUnit) {
            unit = new TopLevelCode(model)
        }
        else {
            unit = new Code(model)
        }

        true
    }

    function closeCompilationUnit(compilationUnit: CompilationUnit) {
        model.units.push(unit)
    }

    function openConstantDeclaration(constantDeclaration: ConstantDeclaration): bool {
        true
    }

    function closeConstantDeclaration(constantDeclaration: ConstantDeclaration) {
    }
}