class Scope
class Unit

// The model of the complete program on which all back ends (apart from direct Cpp Visitors) work.
class Model {

    // The name of the program model
    let name: string

    // The top level code if applicable
    mutable main: Scope

    // The non top level compilation units
    mutable units: Unit[]

    constructor(name: string) {
        this.name = name
        main = null
        units = new Unit[]()
    }
}

// Base class for functions, classes, enums and the like.
class Definition {
}

// A part of the program which corresponds to a single compilation unit.
class Unit {

    // The model which contains the unit
    let model: Model
    
    // The name of the unit
    let name: string
    
    // The definitions of the unit.
    mutable definitions: Definition[]

    // Default constructor
    constructor() {
        definitions = new Definition[]()
    }

    constructor(model: Model, name: string) {
        this.model = model
        this.name = name
        definitions = new Definition[]()
    }
}

// An abstract action of working code.
class Action {
}

// A name bound to some program object.
class Binding {
    let identifier: string
    mutable scope: Scope
}

// A scope in which bindings are active.
class Scope extends Action {

    mutable parent: Scope
    mutable definitions: Definition[]
    mutable bindings: Binding[]
    mutable actions: Action[]

    constructor(parent: Scope) {
        this.parent = parent
        bindings = new Binding[]()
        definitions = new Definition[]()
        actions = new Action[]()
    }
}


class ModelVisitor extends CommonVisitor {

    mutable model: Model
    mutable unit: Unit

    function openProgram(program: Program) : bool {
        model = new Model(program.name)
        
        true
    }

    function openCompilationUnit(compilationUnit: CompilationUnit) : bool {
        if isTopLevelFile(compilationUnit) {
            model.main = new Scope(null)
        }
        else {
            let fileName: string$ = getFileName(compilationUnit)
            unit = new Unit(model, fileName)
        }

        true
    }

    function closeCompilationUnit(compilationUnit: CompilationUnit) {
        if isTopLevelFile(compilationUnit)
            model.units.push(unit)
    }

    function openConstantDeclaration(constantDeclaration: ConstantDeclaration): bool {
        if constantDeclaration.parent is ClassDeclaration {
            // Create a new const class member
        }
        else { 
            // Create a new binding member
        }
            
        true
    }

    function closeConstantDeclaration(constantDeclaration: ConstantDeclaration) {
    }
}