#ifndef __scalyc__CppVisitor__
#define __scalyc__CppVisitor__
#include "scalyc.h"
using namespace scaly;
namespace scalyc {

class Inherits : public Object {
public:
    Inherits(String* className);
    String* name;
    _Array<String>* inheritors;

};

class CppVisitor : public SyntaxVisitor {
public:
    VarString* moduleName;
    VarString* sourceFile;
    VarString* headerFile;
    size_t headerIndentLevel;
    size_t sourceIndentLevel;
    bool firstParameter;
    bool firstBindingInitializer;
    _Array<Inherits>* inherits;
    _Array<String>* classes;
    bool declaringClassMember;
    bool inParameterClause;
    bool abstractFunction;
    bool staticFunction;
    bool inEnumMember;
    bool inFunctionReturn;
    bool constDeclaration;
    bool suppressSource;
    bool suppressHeader;
    CppVisitor();
    virtual void execute(Program* program);
    virtual bool openProgram(Program* program);
    virtual void collectInheritances(Program* program);
    virtual void collectInheritancesInCompilationUnit(CompilationUnit* compilationUnit);
    virtual void registerInheritance(String* className, String* baseName);
    virtual void closeProgram(Program* program);
    virtual bool openCompilationUnit(CompilationUnit* compilationUnit);
    virtual bool isTopLevelFile(CompilationUnit* compilationUnit);
    virtual void closeCompilationUnit(CompilationUnit* compilationUnit);
    virtual bool openTerminatedStatement(TerminatedStatement* terminatedStatement);
    virtual void closeTerminatedStatement(TerminatedStatement* terminatedStatement);
    virtual bool openUseDeclaration(UseDeclaration* useDeclaration);
    virtual void closeUseDeclaration(UseDeclaration* useDeclaration);
    virtual bool openConstantDeclaration(ConstantDeclaration* constantDeclaration);
    virtual void closeConstantDeclaration(ConstantDeclaration* constantDeclaration);
    virtual bool openVariableDeclaration(VariableDeclaration* variableDeclaration);
    virtual void closeVariableDeclaration(VariableDeclaration* variableDeclaration);
    virtual bool openMutableDeclaration(MutableDeclaration* mutableDeclaration);
    virtual void closeMutableDeclaration(MutableDeclaration* mutableDeclaration);
    virtual bool openFunctionDeclaration(FunctionDeclaration* functionDeclaration);
    virtual void closeFunctionDeclaration(FunctionDeclaration* functionDeclaration);
    virtual bool openEnumDeclaration(EnumDeclaration* enumDeclaration);
    virtual void closeEnumDeclaration(EnumDeclaration* enumDeclaration);
    virtual bool openClassDeclaration(ClassDeclaration* classDeclaration);
    virtual void closeClassDeclaration(ClassDeclaration* classDeclaration);
    virtual bool openInitializerDeclaration(InitializerDeclaration* initializerDeclaration);
    virtual void closeInitializerDeclaration(InitializerDeclaration* initializerDeclaration);
    virtual bool openCodeBlock(CodeBlock* codeBlock);
    virtual bool localAllocations(CodeBlock* codeBlock);
    virtual FunctionCall* getFunctionCall(PatternInitializer* patternInitializer);
    virtual bool isCatchingFunctionCall(PatternInitializer* patternInitializer);
    virtual void closeCodeBlock(CodeBlock* codeBlock);
    virtual bool openSimpleExpression(SimpleExpression* simpleExpression);
    virtual void closeSimpleExpression(SimpleExpression* simpleExpression);
    virtual bool openPathIdentifier(PathIdentifier* pathIdentifier);
    virtual void closePathIdentifier(PathIdentifier* pathIdentifier);
    virtual void visitPathItem(PathItem* pathItem);
    virtual bool openInitializer(Initializer* initializer);
    virtual void closeInitializer(Initializer* initializer);
    virtual bool openBindingInitializer(BindingInitializer* bindingInitializer);
    virtual void closeBindingInitializer(BindingInitializer* bindingInitializer);
    virtual bool openPatternInitializer(PatternInitializer* patternInitializer);
    virtual void closePatternInitializer(PatternInitializer* patternInitializer);
    virtual bool openAdditionalInitializer(AdditionalInitializer* additionalInitializer);
    virtual void closeAdditionalInitializer(AdditionalInitializer* additionalInitializer);
    virtual void visitOverrideWord(OverrideWord* overrideWord);
    virtual void visitStaticWord(StaticWord* staticWord);
    virtual void visitIdentifierFunction(IdentifierFunction* identifierFunction);
    virtual bool openFunctionSignature(FunctionSignature* functionSignature);
    virtual void closeFunctionSignature(FunctionSignature* functionSignature);
    virtual bool openFunctionResult(FunctionResult* functionResult);
    virtual void closeFunctionResult(FunctionResult* functionResult);
    virtual void visitExistingClause(ExistingClause* existingClause);
    virtual bool openParameterClause(ParameterClause* parameterClause);
    virtual void closeParameterClause(ParameterClause* parameterClause);
    virtual bool openConstParameter(ConstParameter* constParameter);
    virtual void writeParameter(String* name, Type* parameterType);
    virtual bool isClass(String* name);
    virtual void closeConstParameter(ConstParameter* constParameter);
    virtual bool openVarParameter(VarParameter* varParameter);
    virtual void closeVarParameter(VarParameter* varParameter);
    virtual bool openThrowsClause(ThrowsClause* throwsClause);
    virtual void closeThrowsClause(ThrowsClause* throwsClause);
    virtual bool openEnumMember(EnumMember* enumMember);
    virtual void closeEnumMember(EnumMember* enumMember);
    virtual void appendCppType(VarString* s, Type* type);
    virtual void visitEnumCase(EnumCase* enumCase);
    virtual bool openAdditionalCase(AdditionalCase* additionalCase);
    virtual void closeAdditionalCase(AdditionalCase* additionalCase);
    virtual bool openClassBody(ClassBody* classBody);
    virtual void closeClassBody(ClassBody* classBody);
    virtual void indentHeader();
    virtual void indentSource();
    virtual void collectDerivedClasses(_Array<String>* derivedClasses, String* className);
    virtual void appendDerivedClasses(_Array<String>* derivedClasses, _Array<String>* inheritors);
    virtual bool openGenericArgumentClause(GenericArgumentClause* genericArgumentClause);
    virtual void closeGenericArgumentClause(GenericArgumentClause* genericArgumentClause);
    virtual void visitGenericParameter(GenericParameter* genericParameter);
    virtual bool openClassMember(ClassMember* classMember);
    virtual void closeClassMember(ClassMember* classMember);
    virtual bool openPrefixExpression(PrefixExpression* prefixExpression);
    virtual void closePrefixExpression(PrefixExpression* prefixExpression);
    virtual bool openPostfixExpression(PostfixExpression* postfixExpression);
    virtual void closePostfixExpression(PostfixExpression* postfixExpression);
    virtual bool openBinaryOperation(BinaryOperation* binaryOperation);
    virtual void closeBinaryOperation(BinaryOperation* binaryOperation);
    virtual bool openAssignment(Assignment* assignment);
    virtual bool inInitializer(SyntaxNode* node);
    virtual bool inReturn(SyntaxNode* node);
    virtual bool inThrow(SyntaxNode* node);
    virtual String* getMemberIfCreatingObject(_Page* _rp, Assignment* assignment);
    virtual String* getFunctionName(_Page* _rp, Assignment* assignment);
    virtual bool isCreatingObject(String* functionName, SyntaxNode* node);
    virtual ClassDeclaration* getClassDeclaration(SyntaxNode* node);
    virtual bool isVariableMember(String* memberName, ClassDeclaration* classDeclaration);
    virtual void closeAssignment(Assignment* assignment);
    virtual bool openTypeQuery(TypeQuery* typeQuery);
    virtual void closeTypeQuery(TypeQuery* typeQuery);
    virtual bool openTypeCast(TypeCast* typeCast);
    virtual void closeTypeCast(TypeCast* typeCast);
    virtual bool openCatchClause(CatchClause* catchClause);
    virtual IdentifierExpression* getIdentifierExpression(PostfixExpression* postfixExpression);
    virtual String* getErrorType(CatchClause* catchClause);
    virtual void closeCatchClause(CatchClause* catchClause);
    virtual bool openWildCardCatchPattern(WildCardCatchPattern* wildCardCatchPattern);
    virtual void closeWildCardCatchPattern(WildCardCatchPattern* wildCardCatchPattern);
    virtual bool openIdentifierCatchPattern(IdentifierCatchPattern* identifierCatchPattern);
    virtual void closeIdentifierCatchPattern(IdentifierCatchPattern* identifierCatchPattern);
    virtual void visitOperatorPostfix(OperatorPostfix* operatorPostfix);
    virtual bool openFunctionCall(FunctionCall* functionCall);
    virtual void closeFunctionCall(FunctionCall* functionCall);
    virtual bool openExplicitMemberExpression(ExplicitMemberExpression* explicitMemberExpression);
    virtual void closeExplicitMemberExpression(ExplicitMemberExpression* explicitMemberExpression);
    virtual bool openSubscript(Subscript* subscript);
    virtual void closeSubscript(Subscript* subscript);
    virtual bool openExpressionElement(ExpressionElement* expressionElement);
    virtual void closeExpressionElement(ExpressionElement* expressionElement);
    virtual bool isLastExpressionElement(ExpressionElement* expressionElement);
    virtual bool openNamedMemberPostfix(NamedMemberPostfix* namedMemberPostfix);
    virtual void closeNamedMemberPostfix(NamedMemberPostfix* namedMemberPostfix);
    virtual void visitIdentifierExpression(IdentifierExpression* identifierExpression);
    virtual bool inAssignment(SyntaxNode* syntaxNode);
    virtual Assignment* getAssignment(SyntaxNode* syntaxNode);
    virtual bool inRetDeclaration(SyntaxNode* syntaxNode);
    virtual void visitLiteralExpression(LiteralExpression* literalExpression);
    virtual bool openIfExpression(IfExpression* ifExpression);
    virtual void closeIfExpression(IfExpression* ifExpression);
    virtual bool openSwitchExpression(SwitchExpression* switchExpression);
    virtual void closeSwitchExpression(SwitchExpression* switchExpression);
    virtual bool openForExpression(ForExpression* forExpression);
    virtual void closeForExpression(ForExpression* forExpression);
    virtual bool openWhileExpression(WhileExpression* whileExpression);
    virtual void closeWhileExpression(WhileExpression* whileExpression);
    virtual bool openRepeatExpression(RepeatExpression* repeatExpression);
    virtual void closeRepeatExpression(RepeatExpression* repeatExpression);
    virtual bool openParenthesizedExpression(ParenthesizedExpression* parenthesizedExpression);
    virtual bool assignedToMutableObject(FunctionCall* functionCall);
    virtual bool assignedToConstantObject(FunctionCall* functionCall);
    virtual bool boundToObject(BindingInitializer* bindingInitializer);
    virtual BindingInitializer* getBindingInitializer(FunctionCall* functionCall);
    virtual bool callsInitializer(FunctionCall* functionCall);
    virtual bool catchesError(FunctionCall* functionCall);
    virtual void closeParenthesizedExpression(ParenthesizedExpression* parenthesizedExpression);
    virtual bool openReturnExpression(ReturnExpression* returnExpression);
    virtual void closeReturnExpression(ReturnExpression* returnExpression);
    virtual bool openThrowExpression(ThrowExpression* throwExpression);
    virtual bool inWildcardCatchClause(ThrowExpression* throwExpression);
    virtual CatchClause* getCatchClause(SyntaxNode* syntaxNode);
    virtual String* getReturnType(_Page* _rp, SyntaxNode* syntaxNode);
    virtual String* getThrownType(_Page* _rp, SyntaxNode* syntaxNode);
    virtual bool returnsArray(SyntaxNode* syntaxNode);
    virtual FunctionDeclaration* getFunctionDeclaration(SyntaxNode* syntaxNode);
    virtual void closeThrowExpression(ThrowExpression* throwExpression);
    virtual bool openBreakExpression(BreakExpression* breakExpression);
    virtual void closeBreakExpression(BreakExpression* breakExpression);
    virtual bool openInitializerCall(InitializerCall* initializerCall);
    virtual bool initializerIsBoundOrAssigned(InitializerCall* initializerCall);
    virtual void closeInitializerCall(InitializerCall* initializerCall);
    virtual void visitThisExpression(ThisExpression* thisExpression);
    virtual bool openSuperDot(SuperDot* superDot);
    virtual void closeSuperDot(SuperDot* superDot);
    virtual bool openSuperSubscript(SuperSubscript* superSubscript);
    virtual void closeSuperSubscript(SuperSubscript* superSubscript);
    virtual void visitNullExpression(NullExpression* nullExpression);
    virtual bool openElseClause(ElseClause* elseClause);
    virtual void closeElseClause(ElseClause* elseClause);
    virtual bool openCurliedSwitchBody(CurliedSwitchBody* curliedSwitchBody);
    virtual void closeCurliedSwitchBody(CurliedSwitchBody* curliedSwitchBody);
    virtual bool openNakedSwitchBody(NakedSwitchBody* nakedSwitchBody);
    virtual void closeNakedSwitchBody(NakedSwitchBody* nakedSwitchBody);
    virtual bool openSwitchCase(SwitchCase* switchCase);
    virtual void closeSwitchCase(SwitchCase* switchCase);
    virtual bool openItemCaseLabel(ItemCaseLabel* itemCaseLabel);
    virtual void closeItemCaseLabel(ItemCaseLabel* itemCaseLabel);
    virtual void visitDefaultCaseLabel(DefaultCaseLabel* defaultCaseLabel);
    virtual bool openCaseItem(CaseItem* caseItem);
    virtual void closeCaseItem(CaseItem* caseItem);
    virtual void visitWildcardPattern(WildcardPattern* wildcardPattern);
    virtual bool openIdentifierPattern(IdentifierPattern* identifierPattern);
    virtual bool isCatchingPatternInitializer(PatternInitializer* patternInitializer);
    virtual void closeIdentifierPattern(IdentifierPattern* identifierPattern);
    virtual bool openTuplePattern(TuplePattern* tuplePattern);
    virtual void closeTuplePattern(TuplePattern* tuplePattern);
    virtual bool openExpressionPattern(ExpressionPattern* expressionPattern);
    virtual void closeExpressionPattern(ExpressionPattern* expressionPattern);
    virtual bool openTuplePatternElement(TuplePatternElement* tuplePatternElement);
    virtual void closeTuplePatternElement(TuplePatternElement* tuplePatternElement);
    virtual bool openBlockCaseContent(BlockCaseContent* blockCaseContent);
    virtual void closeBlockCaseContent(BlockCaseContent* blockCaseContent);
    virtual void visitEmptyCaseContent(EmptyCaseContent* emptyCaseContent);
    virtual void visitSuperInit(SuperInit* superInit);
    virtual void visitSuperMember(SuperMember* superMember);
    virtual bool openTypeIdentifier(TypeIdentifier* typeIdentifier);
    virtual bool inArrayType(TypeIdentifier* typeIdentifier);
    virtual bool inTypeQuery(TypeIdentifier* typeIdentifier);
    virtual void appendCppTypeName(VarString* s, TypeIdentifier* typeIdentifier);
    virtual void closeTypeIdentifier(TypeIdentifier* typeIdentifier);
    virtual bool openArrayType(ArrayType* arrayType);
    virtual void closeArrayType(ArrayType* arrayType);
    virtual bool openTypeAnnotation(TypeAnnotation* typeAnnotation);
    virtual void closeTypeAnnotation(TypeAnnotation* typeAnnotation);
    virtual bool openSubtypeIdentifier(SubtypeIdentifier* subtypeIdentifier);
    virtual void closeSubtypeIdentifier(SubtypeIdentifier* subtypeIdentifier);
    virtual void visitOptionalType(OptionalType* optionalType);
    virtual bool openTypeInheritanceClause(TypeInheritanceClause* typeInheritanceClause);
    virtual void closeTypeInheritanceClause(TypeInheritanceClause* typeInheritanceClause);
    virtual bool openInheritance(Inheritance* inheritance);
    virtual void closeInheritance(Inheritance* inheritance);
    virtual void buildMainHeaderFileString(VarString* mainHeaderFile, Program* program);
    virtual void buildProjectFileString(VarString* projectFile, Program* program);

    virtual bool _isCppVisitor();
};

}
#endif // __scalyc__CppVisitor__
