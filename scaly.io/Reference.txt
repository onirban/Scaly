[[reference]]
Reference
=========

[[statements]]
Statements
----------

A Scaly program consists of _statements_. A statement is either an _expression_ which performs 
computation work, or a _declaration_ which declares constructs like functions, classes, or enums 
which can be used in expressions. The statements are written into one or more files each 
containing a number of complete statements. A statement can be terminated by an optional semicolon.

[[expressions]]
Expressions
-----------

_Expressions_ are the most fundamental building block of a Scaly program. 
An expression performs actual computation work and usually returns a value 
as a result of that work. There are numerous forms of expressions in Scaly like _literals_, 
_function calls_, _operations_, and many more.

[[literals]]
Literals
--------

The most basic expressions in Scaly are _literals_. A literal simply returns a value 
that is written literally into a program.

[[classes]]
Classes
-------

Classes are a way of organizing data. Classes can have members - 
either primitive ones like strings or numbers, or other classes, or arrays of them. 
A class member (be it mutable or immutable) is semantically no reference - instead, 
it denotes the object itself. The cosequence is that, if you assign an object 
to another object variable, the object with all of its contained objects is copied. 

In addition to the simple assignment operator `=`, there is also a movement operator `=!` 
which moves the object from the right hand side expression (which must be mutable or variable, 
and optional) to the left hand item which must be mutable or variable either. 

There is also a swap operator `<=>` which swaps the left hand item with the right hand item. 
For swapping, the items must be either both variable, or both mutable.

Objects, however, have no value semantics when passed as arguments to a function. 
If you pass a mutable object to a function, and the function alters that object, 
the changes are visible to the caller after the function returned.

Classes have an important characteristic: they are self-contained data sets 
which means that members of an object cannot point to anything outside the 
object tree, and an object cannot be pointed to by anything else but the owner 
(if it is a class member or an array element).

Since classes organize their data in a in a strictly hierarchical way, 
they can be easily serialized to JSON, XML, or any other text-based or binary 
hierarchical representation of the data they contain. Since classes are serializable, 
their data can be transmitted over the network to other nodes if your program 
runs on a supercomputer, or sent to powerful GPU hardware on your local machine. Thus, programs 
using classes for passing data scale well in a distributed or heterogeneous environment.

Because classes are so easily mapped to JSON or XML, building web services with Scaly 
is a breeze - simply design a set of functions using classes for data transfer, and you are done.

A class can define exactly one reference type as member - the so-called parent reference.
If you assign an object with a parent reference to a member of a containing object, 
this parent reference is automatically set to the containing object.
This is useful if your algorithm walks a tree up and down, or to implement doubly-linked lists. 

[[references]]
Objects and References
----------------------

An object is created by calling a constructor of its class. A constructor returns a new object. 
This object can then be assigned to an item:

  mutable p: Foo = new Foo(42)

A reference item can be declared _mutable_ or _immutable_. 
An immutable item is declared with the `let` keyword. Neither the object it references 
can be changed, nor the item itself:

  let i: Foo = new Foo(43)
  // i.bar = 44 // The object cannot be changed
  // i = new Foo(44) // The item cannot be reassigned

A mutable item is declared with the `mutable` keyword. A mutable item allows for 
changing the object to which its reference points, and for reassigning another reference to it:

  mutable m: Foo = Foo(45)
  m.bar = 46 // The object can be changed
  m = Foo(47) // The item can be reassigned

You can copy an immutable object by assigning it to another immutable object.

  let a: Foo = i
  let b: Foo = v
  v = i


[[objectage]]
Object Age
----------

In Scaly, _objects live on the stack_, either referenced by local items, or by references 
held by other objects, arrays, or dictionaries, which in turn live somewhere on the stack directly 
or indirectly (held by other objects).

If a block is left, the memory of all objects which were created in this block is recycled. 
Therefore, a reference must not be held by an item that outlives the object it references:

  let a: Foo&
  {
      let b: Foo = Foo()
      // a = &b // If b goes out of scope, a would point to recycled memory
  }

To make `b` assignable to `a`, its declaration can be moved to the outer block:

  let a: Foo&
  let b: Foo
  {
      b = Foo()
      a = &b
  }

The lifetime of an object is determined by the place where a reference to it is declared. 
The older an object, the longer it lives. Since older data live at least as long as younger data, 
it can never happen that references to dead data are accessible.

The age of data depends on where it is declared. Items declared in a local block 
are younger than items in the enclosing block. Parameters that are passed to a function 
are older than its local items:

  function f(a: Foo) {
      let b: Bar = Bar()
      {
          let c: Caf = Caf()
      }
  }

In this example, `a` is oldest, `b` is younger than `a`, and `c` is youngest.

A reference returned by a function is assumed to be _fresh_ by default. 
This means that the function creates the object (either by calling an object constructor 
or another function which returns a reference to a fresh object). The caller of such a function 
then assigns the returned reference to an item whose location determines the age of the object:

  function g(): Foo {
      return Foo(42) // Fresh object created and returned
  }
  
  function h() {
      let k: Foo = g() // The object lives here, accessible via k
  }

If a function is to return an object which is not fresh, the age 
of such a returned object must be made explicit by an _age tag_ which 
is written after the type of the return value.

An age tag starts with a single quote (`&`) and continues with digits which form 
a nonnegative number. Leading zero digits are not allowed. `&0` is a valid age tag, 
`&42` is a valid age tag as well, whereas `&01` is not a valid age tag.

Since Scaly does not know global mutable data, there must be one or more parameters 
from which to take the returned reference in some way, 
age tag numbers are used to express age relations between the parameters of a function. 
The higher the age tag value is, the younger is the tagged reference:

  function superiorFoo(fooOld: Foo&1, fooYoung: Foo&2) -> Foo&2 {
      if fooOld.number > fooYoung
          fooOld
      else
          fooYoung
  }

In this example, the returned refrerence can be taken from any of the two parameters, 
and so its age must be that of the youngest parameter.

The following example checks assignments for age validity:

  function bar(mutable foo: Foo&1, mutable bar: Bar&2) {
      bar.foo = foo // Valid because foo is declared older
      // foo.bar = bar // Invalid because bar is younger
  } 

If age tags are omitted, the age of the parameters is irrelevant:

  function baz(p: Foo, q: Foo) -> bool {
      p.number > q
  }

The age of a member is assumed to be the same as the age of the object containing it 
(even though the object it points to might be older). Similarly, the age of an array element 
is assumed to be that of the array, and the age of a dictionary key or value 
is assumed to be that of the dictionary.

