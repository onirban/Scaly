Structures
==========

Structures are another way of organizing data. Like classes, structures can have members - 
either primitive ones like strings or numbers, or other structures, 
or arrays of them. Unlike classes, structures do not know the concept of a reference. 
So, a structure item (be it mutable, immutable, or variable) is semantically no reference - instead, 
it denotes the structure object itself. The cosequence is that, if you assign a structure object 
to another mutable or variable item, the object is copied. 

In addition to the simple assignment operator `=`, there is also a movement operator `=!` which moves the 
object from the right hand side expression (which must be mutable or variable, and optional) to the 
left hand item which must be mutable or variable either. 

As you might have guessed, there is also a swap operator `<=>` which swaps the left hand item 
with the right hand item. For swapping, the items must be either both variable, or both mutable.

Structures, however, have no value semantics when passed as arguments to a function. 
If you pass a mutable structure object to a function, and the function alters that object, 
the changes are visible to the caller after the function returned. If you pass a variable structure object 
to a function, that variable might contain another object after the function returned.

Structures have an important advantage over classes: Structures are self-contained data sets 
which means that members of a structure cannot point to anything outside the 
structure, and a structure cannot be pointed to by anything else but the owner (if it is a structure member or 
an array element). In contrast, classes can can contain references to other objects, 
and objects can be referenced by multiple items. 

Since structures organize their data in a in a strictly hierarchical way, they can be easily serialized 
to JSON, XML, or any other text-based or binary hierarchical representation of the data they contain. 
Since structures are serializable, their data can be transmitted over the network to other nodes 
if your program runs on a supercomputer, or sent to powerful GPU hardware on your local machine. 
Thus, programs using structures for passing data scale well in a distributed or heterogeneous environment.

Because structures are so easily mapped to JSON or XML, building web services with Scaly is a breeze - simply 
design a set of functions using structures for data transfer, and you are done.

Thus, it is a good idea to prefer structures over classes when designing your program if possible.

There will be cases however, in which you want to use classes, especially if your algorithm uses directed graphs
which cannot be expressed as structures, like doubly-linked lists or trees in which the nodes contain 
references to parent nodes. Since class objects cannot be serialized, they cannot be transmitted 
over the network or to a GPU. This means that the parts of your program which use classes cannot be scaled up using a
compute cluster or powerful GPU hardware. 

However, if the data dependencies allow, an algorithm using classes might still be executed in parallel 
by multiple local threads on the machine it is running on. 
